using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace MatrixTextClient;

public class MatrixEvent
{
    [JsonPropertyName("content")]
    public JsonElement? Content { get; set; }
    [JsonPropertyName("type")]
    public required string Type { get; set; }
}

public class MatrixEvent_Ex
{
    /// <summary>
    /// The body of this event, as created by the client which sent it.
    /// </summary>
    [JsonPropertyName("content")]
    public JsonElement? Content { get; set; }

    /// <summary>
    /// The globally unique identifier for this event.
    /// </summary>
    [JsonPropertyName("event_id")]
    public required string EventId { get; set; }

    /// <summary>
    /// Timestamp (in milliseconds since the unix epoch) on originating homeserver when this event was sent.
    /// </summary>
    [JsonPropertyName("origin_server_ts")]
    public required long OriginServerTs { get; set; }

    [JsonPropertyName("room_id")]
    public required string RoomId { get; set; }

    /// <summary>
    /// Contains the fully-qualified ID of the user who sent this event.
    /// </summary>
    [JsonPropertyName("sender")]
    public required string Sender { get; set; }

    [JsonPropertyName("type")]
    public required string Type { get; set; }

    /// <summary>
    /// Present if, and only if, this event is a state event.
    /// The key making this piece of state unique in the room.
    /// Note that it is often an empty string.
    /// </summary>
    [JsonPropertyName("state_key")]
    public string? StateKey { get; set; }

    /// <summary>
    /// Contains optional extra information about the event.
    /// </summary>
    [JsonPropertyName("unsigned")]
    public UnsignedData? Unsigned { get; set; }
}

public class UnsignedData
{
    /// <summary>
    /// The time in milliseconds that has elapsed since the event was sent.
    /// This field is generated by the local homeserver, and may be incorrect
    /// if the local time on at least one of the two servers is out of sync,
    /// which can cause the age to either be negative or greater than it actually is.
    /// </summary>
    [JsonPropertyName("age")]
    public required long Age { get; set; }

    /// <summary>
    /// The room membership of the user making the request, at the time of the event.
    /// </summary>
    [JsonPropertyName("membership")]
    public string? Membership { get; set; }

    /// <summary>
    /// The previous content for this event. This field is generated by the local homeserver,
    /// and is only returned if the event is a state event, and the client has permission to see the previous content.
    /// </summary>
    [JsonPropertyName("prev_content")]
    public JsonElement? PrevContent { get; set; }

    /// <summary>
    /// The event that redacted this event, if any.
    /// </summary>
    [JsonPropertyName("redacted_because")]
    public JsonElement? RedactedBecause { get; set; }

    /// <summary>
    /// The client-supplied transaction ID, for example,
    /// provided via PUT /_matrix/client/v3/rooms/{roomId}/send/{eventType}/{txnId},
    /// if the client being given the event is the same one which sent it.
    /// </summary>
    [JsonPropertyName("transaction_id")]
    public string? TransactionId { get; set; }
}

/// <summary>
/// A stripped down state event
/// </summary>
/// <remarks>
/// Clients should only use stripped state events when they don’t have access to the proper
/// state of the room. Once the state of the room is available, all stripped state should be discarded.
/// </remarks>
public class StrippedStateEvent
{
    [JsonPropertyName("content")]
    public JsonElement? Content { get; set; }

    [JsonPropertyName("sender")]
    public required string Sender { get; set; }

    [JsonPropertyName("state_key")]
    public string? StateKey { get; set; }

    [JsonPropertyName("type")]
    public required string Type { get; set; }
}
